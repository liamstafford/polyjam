datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  jams      OfficialJam[]
}

model Normie {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  authoredJams UnofficialJam[] @relation("AuthoredUnofficialJams")
  participatedOfficialJams OfficialJam[] @relation("ParticipatedOfficialJams")
  participatedUnofficialJams UnofficialJam[] @relation("ParticipatedUnofficialJams")
  bundles   Bundle[]
}

model Judge {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  judgedJams UnofficialJam[]
}

model OfficialJam {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  authorId  Int
  author    Admin     @relation(fields: [authorId], references: [id])
  users     Normie[]  @relation("ParticipatedOfficialJams")
  bundles   Bundle[]  @relation("OfficialJamBundles")
}

model UnofficialJam {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  authorId  Int
  author    Normie    @relation("AuthoredUnofficialJams", fields: [authorId], references: [id])
  judgeId   Int?
  judge     Judge?    @relation(fields: [judgeId], references: [id])
  users     Normie[]  @relation("ParticipatedUnofficialJams")
  bundles   Bundle[]  @relation("UnofficialJamBundles")
}

model Bundle {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  users     Normie[]
  officialJams OfficialJam[] @relation("OfficialJamBundles")
  unofficialJams UnofficialJam[] @relation("UnofficialJamBundles")
}
